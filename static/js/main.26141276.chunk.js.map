{"version":3,"sources":["logo.svg","Clock.js","Button.js","serviceWorker.js","index.js"],"names":["module","exports","ShowBanner","props","time","className","Clock","state","date","Date","this","timerId","setInterval","tick","clearInterval","setState","getSeconds","toLocaleTimeString","React","Component","Button","MyClick","bind","document","getElementsByClassName","style","backgroundColor","onClick","Boolean","window","location","hostname","match","App","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,4HCS3C,SAASC,EAAWC,GAElB,OAAGA,EAAMC,KAAO,GAIZ,yBAAKC,UAAU,cAAf,oBAME,yBAAKA,UAAU,cAAf,mB,IA2DOC,E,YAnDb,WAAYH,GAAQ,IAAD,8BAEjB,4CAAMA,KAGDI,MAAQ,CAETC,KAAM,IAAIC,MAPG,E,iFAWE,IAAD,OAElBC,KAAKC,QAAUC,aAEb,kBAAM,EAAKC,SACX,O,6CAMFC,cAAcJ,KAAKC,W,6BAKnBD,KAAKK,SAAS,CAEZP,KAAM,IAAIC,S,+BAQZ,OAEE,6BAEE,kBAAEP,EAAF,CAAaE,KAAQM,KAAKH,MAAMC,KAAKQ,eAErC,4CAAmBN,KAAKH,MAAMC,KAAKS,qBAAnC,U,GA7CYC,IAAMC,W,OCMXC,E,YA1BX,WAAYjB,GAAQ,IAAD,8BAEf,4CAAMA,KAEDkB,QAAU,EAAKA,QAAQC,KAAb,gBAJA,E,uEAUfC,SAASC,uBAAuB,WAAW,GAAGC,MAAMC,gBAAkB,W,+BAKtE,OAEI,4BAAQC,QAASjB,KAAKW,QAAShB,UAAW,WAA1C,qB,GAnBSa,IAAMC,WCOPS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICNAC,E,iLAIE,OAEI,yBAAK5B,UAAW,WAEZ,kBAAE,EAAF,MACA,kBAAE,EAAF,W,GATEa,IAAMC,WAkBxBe,IAASC,OAAO,kBAAE,EAAF,MAAUZ,SAASa,eAAe,SDmG5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.26141276.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n// default function()\r\n\r\n\r\n\r\nfunction ShowBanner(props) {\r\n\r\n  if(props.time > 30) {\r\n\r\n    return (\r\n\r\n      <div className=\"rest_block\">Stop Working !!!</div>\r\n    )\r\n  } else {\r\n\r\n      return (\r\n\r\n        <div className=\"work_block\"> Work B**ch !!!</div>\r\n      )\r\n  }\r\n}\r\n\r\n\r\nclass Clock extends React.Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props); // all props from React.Component will mimicry Clock also\r\n\r\n    // OBJ\r\n    this.state = {\r\n\r\n        date: new Date()\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.timerId = setInterval(\r\n\r\n      () => this.tick(), // , => interval 1000ms\r\n      1000\r\n    )\r\n  }\r\n\r\n  componentWillUnmount() {\r\n\r\n    clearInterval(this.timerId)\r\n  }\r\n\r\n  tick() {\r\n\r\n    this.setState({\r\n      \r\n      date: new Date()\r\n    })\r\n  }\r\n\r\n\r\n  // render() -> necessary in all classes\r\n  render() {\r\n\r\n    return( \r\n\r\n      <div>\r\n\r\n        < ShowBanner time = {this.state.date.getSeconds()} />\r\n\r\n        <h1>Current Time { this.state.date.toLocaleTimeString() } </h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n// export default App;\r\nexport default Clock;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\n\r\n\r\nclass Button extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props); // all props from React.Component will mimicry Clock also\r\n        \r\n        this.MyClick = this.MyClick.bind(this); // attach MyClick   \r\n    }\r\n\r\n    // Event Listener -> an ordinary function in React\r\n    MyClick() {\r\n\r\n        document.getElementsByClassName(\"wrapper\")[0].style.backgroundColor = \"yellow\";\r\n    }\r\n    \r\n    render() {\r\n\r\n        return(\r\n\r\n            <button onClick={this.MyClick} className= \"clicker\">\r\n                Change Disign\r\n            </button>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Button;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';          \nimport Clock from './Clock';   \nimport Button from './Button'; // => default !!!\nimport * as serviceWorker from './serviceWorker';\n\n//////  START\n\n\n// classes\nclass App extends React.Component {\n\n    render() {\n\n        return(\n\n            <div className= \"wrapper\">\n                \n                < Clock /> \n                < Button />\n            </div>\n        )\n    }\n}\n\n\n\n\nReactDOM.render(< App />, document.getElementById('root') );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// CERNETKA\n//\n// {/* < Clock /> */} => CTRL + K + C"],"sourceRoot":""}